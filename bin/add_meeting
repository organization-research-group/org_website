#!/usr/bin/env python3

import os
import re
import sys
import json
from datetime import datetime

from clean_ttl import clean_ttl

meeting_ttl_template = '''
:meeting:{date}
    a :Meeting ;
    lode:atTime [
        a time:Interval ;
        time:hasBeginning [
            a time:Instant ;
            time:inXSDDateTimeStamp "{date}T10:00:00-0{offset}:00"^^xsd:dateTimeStamp
        ]
    ]'''

involved_ttl_template = ''' ;
    lode:involved {readings}'''

schedule_ttl_template = ''' ;
    :schedule (
        {schedule}
    )'''

reading_ttl_template = '''
{key}
    # FILLME: Update the details of this entry.
    # Added automatically for meeting on {date}
    a :Reading .
'''

BIB_FILENAME = os.path.join(
    os.path.dirname(os.path.realpath(__file__)),
    '..',
    'graph.ttl'
)

print()

try:
    while True:
        date_input = input('\033[1mDate\033[0m (yyyy-mm-dd)\n\n-> ').strip()

        try:
            date = datetime.strptime(date_input, '%Y-%m-%d')
        except ValueError:
            print('\nWrong date format, try again\n')
            continue
        print('''
\033[1mSchedule\033[0m

Add entries for this meeting's schedule, one item a time.

Cite items with an identifier consisting of an '@' symbol, the first word of
the first author's family name followed by the year, like @Buckland1994 or
@Suchman1995.

Add arbitrary HTML by just typing a string.
''')

        _in = None

        schedule_input = []

        while _in != '':
            _in = input('-> ').strip()
            if (_in):
                schedule_input.append(_in)

        cites = []
        schedule = []

        for item in schedule_input:
            if item[0] == '@' and ' ' not in item:
                cite = ':reading:' + item[1:]
                cites.append(cite)
                schedule.append(cite)
            else:
                schedule.append('[ dc:description {} ]'.format(
                    json.dumps(item)))

        old_ttl = ''.join([l for l in open(BIB_FILENAME)])

        pattern = re.compile(r"    :meetings \[")

        new_ttl = ''

        new_ttl += meeting_ttl_template.format(
            date=date_input,
            offset=4 if date.timetuple().tm_isdst > 0 else 5)

        if cites:
            new_ttl += involved_ttl_template.format(
                readings=', '.join(cites)
            )

        if schedule:
            new_ttl += schedule_ttl_template.format(
                schedule='\n        '.join(schedule)
            )

        new_ttl += ' .\n'

        for cite in cites:
            new_ttl += reading_ttl_template.format(
                key=cite,
                date=date_input)
            new_ttl += '\n'

        print('\n====')
        print(new_ttl + '====\n')

        keep = input(
            '\033[1mAdding these statements to graph.ttl. '
            'Press Ctrl-c to cancel.\033[0m')

        ttl_with_new = clean_ttl(
            old_ttl.replace(
                '    :meeting\n',
                '    :meeting\n        :meeting:' + date_input + ',\n')
            + new_ttl
        )

        with open(BIB_FILENAME, 'w') as fp:
            fp.write(ttl_with_new)


except (EOFError, KeyboardInterrupt):
    print('')
    sys.exit(0)
